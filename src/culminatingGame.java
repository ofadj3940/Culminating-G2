
import java.util.*;
import javax.swing.JButton;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/*
 *
 * @author Ofosu Adjei-Afriyie
Date Of Completion: January 27 2016

Purpose: The user is supposed to guess the scrambled words in the text area
to accumalte as many points as possible before losing all their tries
 */
public class culminatingGame extends javax.swing.JFrame {

    //array of strings of easy questions all scrambled up
    String[] easyLevel = {"OZO", "ATC", "OGD", "GPI",
        "ENP", "OWC",
        "IDK", "UBC", "NPI",
        "UPC", "OTT", "OMM",
        "DDA", "LGO", "YGM"};
    //cooresponding array to easyLevel array because it is all the answers to the questions in an array
    String[] easyAnswers = {"Zoo", "Cat", "Dog", "Pig", "Pen", "Cow", "Kid",
        "Cub", "Pin", "Cup", "Tot", "Mom", "Dad", "Log", "Gym"};

    //array of strings of hard questions all scrambled up
    String[] hardLevel = {"UTAALC", "UMHBSA", "LEAZAB", "NATOIC", "ANHROC",
        "TEUANP", "SUKUCR", "SESHET", "ESNOTR", "DTUOXE",
        "RPRAUO", "EOERSZ", "UHNISP", "IFENDR", "UURPNT"};
    //cooresponding array to hardLevel array because it is all the answers to the questions in an array
    String[] hardAnswers = {"ACTUAL", "AMBUSH", "ABLAZE", "ACTION", "ANCHOR",
        "PEANUT", "RUCKUS", "SHEETS", "TENORS", "TUXEDO",
        "UPROAR", "ZEROES", "PUNISH", "FRIEND", "TURNUP"};

    //initializing an arrayList for the highscores of the player
    ArrayList<Integer> scores = new ArrayList();
    
    int[] hs = new int[10];
    //declaring the variables that are used in both private and public blocks of code(global variables)
    int points = 0;
    int tries = 3;
    int levels = 1;
    int currentS = 0;
    int remaining = 0;
    int buttonClicked;
    
    

    /**
     * Creates new form culminatingGame
     */
    public culminatingGame() {
        initComponents();
        //make these components of the game initially when the game is opened up
        answerButton.setVisible(false);
        restartButton.setVisible(false);
        easyButton.setVisible(false);
        hardButton.setVisible(false);
        scoreButton.setVisible(false);
        inputField1.setVisible(false);
        outputPanel1.setVisible(false);
        rulesButton.setVisible(false);

        //add 10 slots for the players top 10 high scores
        int[] hs = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
        
        Collections.addAll(scores, 0,0,0,0,0,0,0,0,0,0);
        //Collections.sort(scores);

        
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        scoreButton = new javax.swing.JButton();
        titleLabel = new javax.swing.JLabel();
        easyButton = new javax.swing.JButton();
        hardButton = new javax.swing.JButton();
        restartButton = new javax.swing.JButton();
        playButton = new javax.swing.JButton();
        outputPanel1 = new javax.swing.JPanel();
        inputField1 = new javax.swing.JTextField();
        answerButton = new javax.swing.JButton();
        scoreLabel1 = new javax.swing.JLabel();
        triesLabel1 = new javax.swing.JLabel();
        levelLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        binTextField1 = new javax.swing.JTextArea();
        guessLabel = new javax.swing.JLabel();
        incorrectLabel = new javax.swing.JLabel();
        rulesButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(0, 0, 0));

        scoreButton.setBackground(new java.awt.Color(204, 0, 0));
        scoreButton.setText("Score");
        scoreButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                scoreButtonActionPerformed(evt);
            }
        });

        titleLabel.setFont(new java.awt.Font("Tahoma", 0, 48)); // NOI18N
        titleLabel.setForeground(new java.awt.Color(0, 204, 0));
        titleLabel.setText("Unscramble That Word");

        easyButton.setBackground(new java.awt.Color(255, 0, 0));
        easyButton.setText("Easy");
        easyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                easyButtonActionPerformed(evt);
            }
        });

        hardButton.setBackground(new java.awt.Color(204, 0, 0));
        hardButton.setText("Hard");
        hardButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hardButtonActionPerformed(evt);
            }
        });

        restartButton.setBackground(new java.awt.Color(204, 0, 0));
        restartButton.setText("Restart");
        restartButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                restartButtonActionPerformed(evt);
            }
        });

        playButton.setBackground(new java.awt.Color(255, 51, 51));
        playButton.setText("Play");
        playButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playButtonActionPerformed(evt);
            }
        });

        outputPanel1.setBackground(new java.awt.Color(255, 0, 0));
        outputPanel1.setBorder(javax.swing.BorderFactory.createMatteBorder(5, 5, 5, 5, new java.awt.Color(0, 255, 0)));
        outputPanel1.setMinimumSize(new java.awt.Dimension(478, 375));

        inputField1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        inputField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputField1ActionPerformed(evt);
            }
        });

        answerButton.setBackground(new java.awt.Color(0, 204, 0));
        answerButton.setText("Answer");
        answerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                answerButtonActionPerformed(evt);
            }
        });

        scoreLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        scoreLabel1.setText("Score:0");

        triesLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        triesLabel1.setText("Tries: 3");

        levelLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        levelLabel1.setText("Level: 1");

        jScrollPane2.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        binTextField1.setEditable(false);
        binTextField1.setBackground(new java.awt.Color(0, 0, 0));
        binTextField1.setColumns(20);
        binTextField1.setFont(new java.awt.Font("Yu Gothic UI Light", 1, 24)); // NOI18N
        binTextField1.setForeground(new java.awt.Color(0, 255, 51));
        binTextField1.setLineWrap(true);
        binTextField1.setRows(5);
        binTextField1.setText("Select Easy or Hard to Begin Game");
        binTextField1.setWrapStyleWord(true);
        binTextField1.setAutoscrolls(false);
        binTextField1.setMinimumSize(new java.awt.Dimension(424, 164));
        binTextField1.setSelectionColor(new java.awt.Color(0, 255, 0));
        jScrollPane2.setViewportView(binTextField1);

        guessLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        guessLabel.setText("Your Guess:");

        incorrectLabel.setFont(new java.awt.Font("Tahoma", 3, 12)); // NOI18N
        incorrectLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout outputPanel1Layout = new javax.swing.GroupLayout(outputPanel1);
        outputPanel1.setLayout(outputPanel1Layout);
        outputPanel1Layout.setHorizontalGroup(
            outputPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(outputPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(outputPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(outputPanel1Layout.createSequentialGroup()
                        .addComponent(incorrectLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, outputPanel1Layout.createSequentialGroup()
                        .addGroup(outputPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(outputPanel1Layout.createSequentialGroup()
                                .addComponent(scoreLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(levelLabel1)
                                .addGap(103, 103, 103)
                                .addComponent(triesLabel1))
                            .addGroup(outputPanel1Layout.createSequentialGroup()
                                .addGap(13, 13, 13)
                                .addGroup(outputPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 410, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(outputPanel1Layout.createSequentialGroup()
                                        .addComponent(guessLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(outputPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(answerButton)
                                            .addComponent(inputField1, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                        .addGap(35, 35, 35))))
        );
        outputPanel1Layout.setVerticalGroup(
            outputPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, outputPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(outputPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scoreLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, outputPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(levelLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(triesLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 351, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(outputPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(guessLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(inputField1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(answerButton)
                .addGap(1, 1, 1)
                .addComponent(incorrectLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        rulesButton.setBackground(new java.awt.Color(204, 0, 0));
        rulesButton.setText("How To Play");
        rulesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rulesButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(outputPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(hardButton)
                            .addComponent(easyButton)
                            .addComponent(playButton)
                            .addComponent(scoreButton)
                            .addComponent(restartButton)
                            .addComponent(rulesButton)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(49, 49, 49)
                        .addComponent(titleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 496, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(42, 42, 42))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(titleLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(playButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(easyButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(hardButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(scoreButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rulesButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(restartButton)
                        .addContainerGap())
                    .addComponent(outputPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void answerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_answerButtonActionPerformed
 String ans = inputField1.getText();
        String question = binTextField1.getText();
        boolean anyCorrect = false;

        //set the textfield to nothing so that it clears everytime the user enters an answer
        inputField1.setText("");
        //set the label to nothing so that it clears everytime the user enters an answer
        incorrectLabel.setText("");

        switch (buttonClicked) {
            //if the easy button is clicked then run the easy level questions and answers
            case 1:
                //iterate through each element in the easylevel array
                for (int x = 0; x < easyLevel.length; x++) {

                     /*if the answer the user typed is equal to the x value in answers
                    array and the question in the text area is equal to the easyLevel question
                    then load the next easyLevel question and add 10 points to the score aswell 
                    as increasing the levels by 1 up to the last question. If 
                    the last question is correct then load congrats screen and make the
                    answer button and text field disappear while the score and restart
                    buttons appear and the boolean anyCorrect is true because that means 
                    at least one of the answers and input matched*/ 
                    if (ans.equalsIgnoreCase(easyAnswers[x]) && question.equals(easyLevel[x])) {
                        if (x < easyLevel.length - 1) {
                            binTextField1.setText(easyLevel[x + 1]);
                        } else {
                            binTextField1.setText("Congrats, you have cracked all the code!"
                                    + " Select 'Score' to view your score! If you think this"
                                    + " is easy give 'Hard' a try!");
                            answerButton.setVisible(false);
                            scoreButton.setVisible(true);
                            restartButton.setVisible(true);
                        }
                        currentS = score(points);
                        scoreLabel1.setText("Score: " + currentS);
                        nextLevel(levels);
                        levelLabel1.setText("Level: " + levels);
                        anyCorrect = true;
                        break;
                        
                        /*if the boolean is still anyCorrect
                        is true and  the player’s answer is empty then 
                        prompt the user to put in an answer*/
                    } else if (anyCorrect = true && ans.equals("")) {
                        incorrectLabel.setText("Make sure to type something into the answer box below!");
                    }
                }
                
                /* if none of the players answers match the array answers then
                output an Incorrect message and output the amount of tries 
                remaining using the triesRemaining method */
                if (!anyCorrect) {
                    incorrectLabel.setText("INCORRECT");
                    remaining = triesRemaining(tries);
                    triesLabel1.setText("Tries: " + remaining);
                }
                
                /* if the players have no more tries then the game over message
                is loaded and everything but the output screen, score button, 
                and back button is loaded*/
                if (tries == 0) {

                    binTextField1.setText("Game Over! Your score was " + points +
                            "\nSelect 'Score' to view score");

                    endGame();

                }
                break;

            //if the hard button is clicked then run the hard level questions and answers
            case 2:
                
                //iterate through each element in the hard questions array
                for (int x = 0; x < hardLevel.length; x++) {
                    
                    /*if the answer the user typed is equal to the x value in answers
                    array and the question in the text area is equal to the hardLevel question
                    then load the next hardLevel question and add 15 points to the score aswell 
                    as increasing the levels by 1 up to the last question. If 
                    the last question is correct then load congrats screen and make the
                    answer button and text field disappear while the score and restart
                    buttons appear and the boolean anyCorrect is true because 
                    that means at least one of the answers and input matched*/
                    if (ans.equalsIgnoreCase(hardAnswers[x]) && question.equalsIgnoreCase(hardLevel[x])) {
                        if (x < hardLevel.length - 1) {
                            binTextField1.setText(hardLevel[x + 1]);
                        } else {

                            binTextField1.setText("Congrats, you have cracked all the code!");
                            scoreButton.setVisible(true);
                        }
                        currentS = score(points);
                        scoreLabel1.setText("Score: " + currentS);
                        nextLevel(levels);
                        levelLabel1.setText("Level: " + levels);
                        anyCorrect = true;
                        break;
                        
                        /*if the boolean is still anyCorrect is true and  the 
                        player’s answer is empty then prompt the user to put in an answer*/
                    } else if (anyCorrect = true && ans.equals("")) {
                        incorrectLabel.setText("Make sure to type something into the answer box below!");
                    }
                }
                /* if none of the players answers match the array answers then 
                output an Incorrect message and output the amount of tries 
                remaining using the triesRemaining method */

                if (!anyCorrect) {
                    remaining = triesRemaining(tries);
                    incorrectLabel.setText("INCORRECT");
                    triesLabel1.setText("Tries: " + remaining);
                }
                
                /* if the players have no more tries then the game over message
                is loaded and everything but the output screen, score button,
                and back button is loaded*/
                if (tries == 0) {

                    binTextField1.setText("Game Over! Your score was " + points
                            + "\nPlease enter your name into text field."
                            + " Select 'Score' to view score or select 'Restart' to restart");
                    triesLabel1.setVisible(false);
                    scoreLabel1.setVisible(false);
                    levelLabel1.setVisible(false);
                    easyButton.setVisible(false);
                    hardButton.setVisible(false);
                    restartButton.setVisible(true);
                    scoreButton.setVisible(true);
                    answerButton.setText("Enter");

                    break;
                }

        }
    }//GEN-LAST:event_answerButtonActionPerformed

    private void inputField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputField1ActionPerformed
        String ans = inputField1.getText();
        String question = binTextField1.getText();
        boolean anyCorrect = false;

        //set the textfield to nothing so that it clears everytime the user enters an answer
        inputField1.setText("");
        //set the label to nothing so that it clears everytime the user enters an answer
        incorrectLabel.setText("");

        switch (buttonClicked) {
            //if the easy button is clicked then run the easy level questions and answers
            case 1:
                //iterate through each element in the easylevel array
                for (int x = 0; x < easyLevel.length; x++) {

                     /*if the answer the user typed is equal to the x value in answers
                    array and the question in the text area is equal to the easyLevel question
                    then load the next easyLevel question and add 10 points to the score aswell 
                    as increasing the levels by 1 up to the last question. If 
                    the last question is correct then load congrats screen and make the
                    answer button and text field disappear while the score and restart
                    buttons appear and the boolean anyCorrect is true because that means 
                    at least one of the answers and input matched*/ 
                    if (ans.equalsIgnoreCase(easyAnswers[x]) && question.equals(easyLevel[x])) {
                        if (x < easyLevel.length - 1) {
                            binTextField1.setText(easyLevel[x + 1]);
                        } else {
                            binTextField1.setText("Congrats, you have cracked all the code! Select 'Score' to view your score! If you think this is easy give 'Hard' a try!");
                            endGame();
                        }
                        currentS = score(points);
                        scoreLabel1.setText("Score: " + currentS);
                        nextLevel(levels);
                        levelLabel1.setText("Level: " + levels);
                        anyCorrect = true;
                        break;
                        
                        /*if the boolean is still anyCorrect
                        is true and  the player’s answer is empty then 
                        prompt the user to put in an answer*/
                    } else if (anyCorrect = true && ans.equals("")) {
                        incorrectLabel.setText("Make sure to type something into the answer box below!");
                    }
                }
                
                /* if none of the players answers match the array answers then
                output an Incorrect message and output the amount of tries 
                remaining using the triesRemaining method */
                if (!anyCorrect) {
                    incorrectLabel.setText("INCORRECT");
                    remaining = triesRemaining(tries);
                    triesLabel1.setText("Tries: " + remaining);
                }
                
                /* if the players have no more tries then the game over message
                is loaded and everything but the output screen, score button, 
                and back button is loaded*/
                if (tries == 0) {

                    binTextField1.setText("Game Over! Your score was " + points +
                            "\nSelect 'Score' to view score");

                    endGame();

                }
                break;

            //if the hard button is clicked then run the hard level questions and answers
            case 2:
                
                //iterate through each element in the hard questions array
                for (int x = 0; x < hardLevel.length; x++) {
                    
                    /*if the answer the user typed is equal to the x value in answers
                    array and the question in the text area is equal to the hardLevel question
                    then load the next hardLevel question and add 15 points to the score aswell 
                    as increasing the levels by 1 up to the last question. If 
                    the last question is correct then load congrats screen and make the
                    answer button and text field disappear while the score and restart
                    buttons appear and the boolean anyCorrect is true because 
                    that means at least one of the answers and input matched*/
                    if (ans.equalsIgnoreCase(hardAnswers[x]) && question.equalsIgnoreCase(hardLevel[x])) {
                        if (x < hardLevel.length - 1) {
                            binTextField1.setText(hardLevel[x + 1]);
                        } else {

                            binTextField1.setText("Congrats, you have cracked all the code!");
                            endGame();
                        }
                        currentS = score(points);
                        scoreLabel1.setText("Score: " + currentS);
                        nextLevel(levels);
                        levelLabel1.setText("Level: " + levels);
                        anyCorrect = true;
                        break;
                        
                        /*if the boolean is still anyCorrect is true and  the 
                        player’s answer is empty then prompt the user to put in an answer*/
                    } else if (anyCorrect = true && ans.equals("")) {
                        incorrectLabel.setText("Make sure to type something into the answer box below!");
                    }
                }
                /* if none of the players answers match the array answers then 
                output an Incorrect message and output the amount of tries 
                remaining using the triesRemaining method */

                if (!anyCorrect) {
                    remaining = triesRemaining(tries);
                    incorrectLabel.setText("INCORRECT");
                    triesLabel1.setText("Tries: " + remaining);
                }
                
                /* if the players have no more tries then the game over message
                is loaded and everything but the output screen, score button,
                and back button is loaded*/
                
                if (tries == 0) {

                    binTextField1.setText("Game Over! Your score was " + points+ "\n Select 'Score' to view score");
                    endGame();

                    break;
                }

        }
    }//GEN-LAST:event_inputField1ActionPerformed

    private void playButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playButtonActionPerformed
        //make these buttons appear when the button is pressed
        outputPanel1.setVisible(true);
        levelLabel1.setVisible(true);
        easyButton.setVisible(true);
        hardButton.setVisible(true);
        rulesButton.setVisible(true);

        //make these buttons disappear when the play button is clicked
        scoreButton.setVisible(false);
        restartButton.setVisible(false);
        answerButton.setVisible(false);
        playButton.setVisible(false);
        inputField1.setVisible(false);
        guessLabel.setVisible(false);
         triesLabel1.setVisible(false);
        levelLabel1.setVisible(false);
        scoreLabel1.setVisible(false);
    }//GEN-LAST:event_playButtonActionPerformed

    private void restartButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_restartButtonActionPerformed
        //when the restart button is pressed then reset everything back to its original value and display main menu
        restart();
    }//GEN-LAST:event_restartButtonActionPerformed

    private void hardButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hardButtonActionPerformed
        //output first hard level question
        binTextField1.setText(hardLevel[0]);
        
        //change value of button clicked to 2 for further reference in switch
        buttonClicked = 2;
        
        //display game console and clear everything else except restart button
        displayOnClick(answerButton);
    }//GEN-LAST:event_hardButtonActionPerformed

    private void easyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_easyButtonActionPerformed
        //output first easy level question
        binTextField1.setText(easyLevel[0]);
        
        //change value of button clicked to 1 for further reference in switch
        buttonClicked = 1;
        
        //display game console and clear everything else except restart button
        displayOnClick(answerButton);
    }//GEN-LAST:event_easyButtonActionPerformed

    private void scoreButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scoreButtonActionPerformed
        String ans = inputField1.getText();
        String question = binTextField1.getText();
        
        //set the text for the input field and incorrec label to nothing
        inputField1.setText("");
        incorrectLabel.setText("");
        
        //set the text of the restart button to main menu so that the user can return to the main menu
        restartButton.setText("Main Menu");
        
        //make the restart button visible
        restartButton.setVisible(true);
        
        //make the these buttons disappear once score button is clicked
        scoreButton.setVisible(false);
        triesLabel1.setVisible(false);
        answerButton.setVisible(false);
        scoreLabel1.setVisible(false);
        levelLabel1.setVisible(false);
        easyButton.setVisible(false);
        hardButton.setVisible(false);
        rulesButton.setVisible(false);
        
        //set the text in the text area to a title of the players high scores
        binTextField1.setText("Your High Scores:");
        
        /*add the players points to the scores arraylist and sort
        it in descending order and get rid of last element to only display top
        10 scores*/
        
        
        scores.add(points);
        //Collections.sort(scores);
        //Collections.reverse(scores);
        //scores.remove(scores.size() - 1);
        
        
        //iterate through the score size and display each score bin order from highest to lowest
        
            
            int [] test = {3,1,5,2};
            
            System.out.println(Arrays.toString(sorting(test)));
            
        for (int i = 0; i < hs.length; i++) {
           Arrays.toString(sorting(hs));
           
           hs[i] = scores.get(i);
           
           System.out.println("Array1:\tArrayL1:\n"+hs[i] +"\t"+ scores.get(i));
    
            
           System.out.println("Array2:\tArrayL:2\n"+hs[i] +"\t"+ scores.get(i)); 
           
           Arrays.toString(sorting(hs));
           binTextField1.setText(binTextField1.getText() + "\n" + (i + 1) + ": " + hs[i]); 
           
       
        }
    }//GEN-LAST:event_scoreButtonActionPerformed

    private void rulesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rulesButtonActionPerformed
        //all these buttons disappear 
        triesLabel1.setVisible(false);
        scoreLabel1.setVisible(false);
        levelLabel1.setVisible(false);
        easyButton.setVisible(false);
        hardButton.setVisible(false);
        scoreButton.setVisible(false);
        answerButton.setVisible(false);

        rulesButton.setVisible(false);

        //display restart button as "Back" so you can return 'back' to main menu
        restartButton.setVisible(true);
        restartButton.setText("Back");

        //instructions as to how the game will be played. Displayed in textArea
        binTextField1.setText("The objetive of this game is to unsrcamble all "
                + "the words to accumalate as many points as possible. On Easy Level you are granted 10 points "
                + "for each correct answer and 15 points if you play on Hard Level. Try and see if you have what it takes "
                + "to Uscramble That Word!");
    }//GEN-LAST:event_rulesButtonActionPerformed
    /*score is a method which calculates the users total score. Parameters passed in is an integer value
     and the number returned is an integer value. The whther the score increases by 10 or 15 is based on whether
     the user is playing easy or hard level*/
    public int score(int num) {
        
        switch (buttonClicked){
            case 1:
                points += 10;
            break;
            case 2:
                points += 15;
        }
        

        return points;
    }

    /*triesRemaining calculates how many tries remaining the player has. Parameters passed is an integer
     value and also returns an integer value. The tries merely subtracts 1 from the global variable of "tries"*/
    public int triesRemaining(int num) {

        tries--;

        return tries;
    }

    /*nextLevel is a method which calculates which level the user is currently on. Parameters passed is an integer value
     and also returns an integer value. The next level increments by the global variable "levels" by one*/
    public int nextLevel(int num) {

        levels++;

        return levels;
    }
    /*displays and clears a ceratain series of buttons, and a text field. Parameters passed is a JButton value.
     There is no return value. The parameters is also set at true for visibility which means that it is also displayed along with the 
     restart button and inputfield*/

    public void displayOnClick(JButton name) {
        inputField1.setVisible(true);
        scoreLabel1.setVisible(true);
        triesLabel1.setVisible(true);
        levelLabel1.setVisible(true);
        easyButton.setVisible(false);
        hardButton.setVisible(false);
        scoreButton.setVisible(false);
        rulesButton.setVisible(false);
        restartButton.setVisible(true);
        incorrectLabel.setVisible(true);

        name.setVisible(true);
    }
    
    /*displays and clears a ceratain series of buttons, and a text field when game is over. 
    No parameters passed and there is no return value.*/
    
    public void endGame(){

         triesLabel1.setVisible(false);
         scoreLabel1.setVisible(false);
         levelLabel1.setVisible(false);
         easyButton.setVisible(false);
         hardButton.setVisible(false);
         incorrectLabel.setVisible(false);
         inputField1.setVisible(false);
         answerButton.setVisible(false);
         restartButton.setVisible(false);
         
         scoreButton.setVisible(true);
         
         
    }

    /*restart method resets all variables such as score, tries, and value to its original value.
     There are no parameters or return values. Method also displays inital menu after play button is clicked
     and also resets the text for any button back to its original*/
    public void restart() {

        String ans = inputField1.getText();
        String name = inputField1.getText();
        String question = binTextField1.getText();

        inputField1.setText("");
        incorrectLabel.setText("");

        points = 0;
        tries = 3;
        levels = 1;
        currentS = 0;
        remaining = 0;

        binTextField1.setText("Select Easy or Hard to begin game");
        scoreLabel1.setText("Score: " + 0);
        triesLabel1.setText("Tries: " + 3);
        levelLabel1.setText("Level: " + 1);

        
        answerButton.setVisible(false);
        restartButton.setVisible(false);
        inputField1.setVisible(false);
        triesLabel1.setVisible(false);
        levelLabel1.setVisible(false);
        scoreLabel1.setVisible(false);
        
        
        outputPanel1.setVisible(true);
        easyButton.setVisible(true);
        hardButton.setVisible(true);
        scoreButton.setVisible(true);
        rulesButton.setVisible(true);
        

        restartButton.setText("Restart");
        answerButton.setText("Answer");

    }
    public static int[] sorting(int nums[]) {
        
        long startTime = System.nanoTime();
        int min;
        for (int i = 0; i < nums.length; i++) {
            min = i;
            for (int j = i + 1; j < nums.length; j++) {
                if (nums[j] > nums[min]) {
                    min = j;
                }
                //c = nums.length*(i+1);
            }

            if (min != i) {
                int temp = nums[i];
                nums[i] = nums[min];
                nums[min] = temp;
            }
        }

        return nums;
    }
    
        public static void outputting(int[] nums) {
        System.out.println(Arrays.toString(SortAlgorithm.sorting(nums)));
        System.out.println(SortAlgorithm.Duration());
        System.out.println(SortAlgorithm.comparisons() + " comparisons");
    }


    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */

        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(culminatingGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(culminatingGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(culminatingGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(culminatingGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new culminatingGame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton answerButton;
    private javax.swing.JTextArea binTextField1;
    private javax.swing.JButton easyButton;
    private javax.swing.JLabel guessLabel;
    private javax.swing.JButton hardButton;
    private javax.swing.JLabel incorrectLabel;
    private javax.swing.JTextField inputField1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel levelLabel1;
    private javax.swing.JPanel outputPanel1;
    private javax.swing.JButton playButton;
    private javax.swing.JButton restartButton;
    private javax.swing.JButton rulesButton;
    private javax.swing.JButton scoreButton;
    private javax.swing.JLabel scoreLabel1;
    private javax.swing.JLabel titleLabel;
    private javax.swing.JLabel triesLabel1;
    // End of variables declaration//GEN-END:variables
}
